;;;;;;;;;;;;;;;;;;;;;;;;
;;; pre-testing prep ;;;
;;;;;;;;;;;;;;;;;;;;;;;;

(load "../lisp-unit.lisp")

(use-package :lisp-unit)

(load "lgraph.lisp")

(remove-tests :all)

(setq *print-failures* t)

(defun g1 (node)
    (cond
        ((equal node 0) '((a 0) (b 1)))    
        ((equal node 1) '((c 2) (f 3)))    
        ((equal node 2) '(nil))              
        ((equal node 3) '((k 4) (j 7)))    
        ((equal node 4) '((m 7)))          
        ((equal node 7) '((l 6)))          
        ((equal node 6) '(nil))              
        (t nil)
    )
)

(defun g2 (node)
    (cond
        ((equal node 0) '((a 0) (b 1)))     
        ((equal node 1) '((c 2) (f 3)))     
        ((equal node 2) '((d 2) (e 0)))     
        ((equal node 3) '((g 4) (j 5)))     
        ((equal node 4) '((h 1)))           
        ((equal node 5) '((l 6)))           
        ((equal node 6) '(nil))               
        (t nil)
    )
)

(defun g3 (node)
    (cond
        ((equal node 0) '((a 0) (b 1) (o 4)))
        ((equal node 1) '((n 0) (c 2) (f 3)))
        ((equal node 2) '((d 2) (e 0)))
        ((equal node 3) '((g 4)))
        ((equal node 4) '((h 1)))
        (t nil)
    )
)

(defun g4 (node)
    (cond
        ((equal node 11) '((y 34) (y 2)))
        ((equal node 34) '((n 199)))
        ((equal node 2) '((n 199)))
        ((equal node 14) '((a 8)))
        ((equal node 8) '((y 8) (a 14)))
        ((equal node 199) '(nil))
        ((equal node 200) '((x 201)))
        ((equal node 201) '((y 202)))
        ((equal node 202) '(nil))
        (t nil)
    )
)

(defun g5 (node)
    (cond
        ((equal node 14) '((a 14)))
        ((equal node 11) '((n 3) (n 2)))
        ((equal node 3) '((y 199)))
        ((equal node 2) '((y 199)))
        ((equal node 199) '(nil))
        ((equal node 200) '((x 201) (x 203)))
        ((equal node 201) '((y 202)))
        ((equal node 202) '(nil))
        ((equal node 203) '((a 202)))
        (t nil)
    )
)

(define-test test-single-solution
    (assert-equal NIL (find-sequence 'g1 'g2 17 0 2))
    (assert-equal '(NIL . t) (find-sequence 'g1 'g2 7 7 0))
    (assert-equal '((l). t) (find-sequence 'g1 'g2 7 6 1))
    (assert-equal NIL (find-sequence 'g1 'g2 0 0 0))
    (assert-equal NIL (find-sequence 'g1 'g2 2 0 1))
    (assert-equal NIL (find-sequence 'g1 'g2 4 0 3))
    (assert-equal '((e) . t) (find-sequence 'g2 'g1 2 0 1))
    (assert-equal '((h) . t) (find-sequence 'g2 'g1 4 1 1))
    (assert-equal NIL (find-sequence 'g2 'g1 3 6 2))
    (assert-equal '((f k) . t) (find-sequence 'g1 'g2 1 4 2))
    (assert-equal NIL (find-sequence 'g1 'g2 0 2 2))
    (assert-equal NIL (find-sequence 'g2 'g1 1 2 1))
    (assert-equal NIL (find-sequence 'g2 'g1 0 3 3))
    (assert-equal '((a b f g) . t) (find-sequence 'g2 'g1 0 4 4))
    (assert-equal '((m l) . t) (find-sequence 'g1 'g2 4 6 2))
    (assert-equal '((h f j l) . t) (find-sequence 'g2 'g1 4 6 4))
    (assert-equal '((e b f j l) . t) (find-sequence 'g2 'g1 2 6 5))
    (assert-equal '((b f k m l) . t) (find-sequence 'g1 'g2 0 6 5))
    (assert-equal '((a) . t) (find-sequence 'g5 'g4 14 14 1))
    (assert-equal NIL (find-sequence 'g5 'g4 14 14 8))
    (assert-equal '((a a a) . t) (find-sequence 'g5 'g4 14 14 3))
    (assert-equal NIL (find-sequence 'g4 'g5 11 199 1))
    (assert-equal '((y n) . t) (find-sequence 'g4 'g5 11 199 2))
    (assert-equal NIL (find-sequence 'g4 'g5 11 199 3))
    (assert-equal NIL (find-sequence 'g4 'g5 200 202 2))
    (assert-equal '((x a) . t) (find-sequence 'g5 'g4 200 202 2))
)

(define-test test-two-solutions
    (let ((result (find-sequence 'g2 'g1 1 3 4)))
        (assert-true (or (equal result '((c e b f) . t))
                         (equal result '((f g h f) . t))) 
        )
    )
    (let ((result (find-sequence 'g2 'g1 1 0 3)))
        (assert-true (or (equal result '((c d e) . t))
                         (equal result '((c e a) . t))) 
        )
    )
    (let ((result (find-sequence 'g3 'g1 1 4 2)))
        (assert-true (or (equal result '((f g) . t))
                         (equal result '((n o) . t))) 
        )
    )
    (let ((result (find-sequence 'g3 'g2 0 4 3)))
        (assert-true (or (equal result '((b n o) . t))
                         (equal result '((a a o) . t))) 
        )
    )
    (let ((result (find-sequence 'g2 'g1 2 2 3)))
        (assert-true (or (equal result '((e b c) . t))
                         (equal result '((d d d) . t))) 
        )
    )
)

(define-test test-five-solutions
    (let ((result (find-sequence 'g2 'g1 1 2 5)))
        (assert-true (or (equal result '((c d d d d) . t))
                          (equal result '((c d e b c) . t))
                          (equal result '((c e a b c) . t))
                          (equal result '((c e b c d) . t))
                          (equal result '((f g h c d) . t))) 
        )
    )
)

(define-test test-eight-solutions
    (let ((result (find-sequence 'g2 'g1 1 1 6)))
        (assert-true (or (equal result '((c d d d e b) . t))
                          (equal result '((c d d e a b) . t))
                          (equal result '((c d e a a b) . t))
                          (equal result '((c e a a a b) . t))
                          (equal result '((c e b c e b) . t))
                          (equal result '((c e b f g h) . t))
                          (equal result '((f g h c e b) . t))
                          (equal result '((f g h f g h) . t))) 
        )
    )
)

;;;;;;;;;;;;;;;;;
;;; run tests ;;;
;;;;;;;;;;;;;;;;;

(run-tests :all)